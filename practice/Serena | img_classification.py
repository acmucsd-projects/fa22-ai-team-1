# -*- coding: utf-8 -*-
"""ACM Image Classification Attempt - Serena.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fw6IMkxmyF9LIWn9dadogVUj-wIVgFKl

https://scikit-learn.org/stable/auto_examples/classification/plot_digits_classification.html
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install mglearn
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import mglearn

from multiprocessing import Process
from time import sleep
from shutil import copyfile
import pandas as pd
import os
import subprocess
import numpy as np
import random
import sklearn.neural_network as nn
from sklearn import datasets as ds
import matplotlib.pyplot as plt

digits = ds.load_digits() #load the image dataset from NMIST through sklearn

import random
random.seed(2019) #keeps it random everytime we rerun the compiler
rix = [x for x in range(len(digits["target"]))]
#print(rix)
#print(digits["target"])


#shuffle the data
random.shuffle(rix)
dlen = len(rix)
tlimit = int(dlen*0.9)
train_data = digits["data"][0:tlimit]
train_target = digits["target"][0:tlimit]
test_data = digits["data"][tlimit:]
test_target = digits["target"][tlimit:]
test_images = digits["images"][tlimit:]

#another way to split the data
#from sklearn.model_selection import train_test_split
#train_data, test_data, train_target, test_target = train_test_split(digits["data"], digits["target"], random_state = 42, test_size = 0.1)
#print(test_target)
#print(len(test_target))
#print(test_data[0])

clf1 = nn.MLPClassifier(hidden_layer_sizes = (10), 
                        activation = "relu", 
                        max_iter = 200, 
                        random_state = 2000, 
                        verbose = True)
myclf = clf1.fit(train_data, train_target)

clf1.score(test_data, test_target)

import time
import os

#print(rix)
#print(test_data[0:5])
#print(test_target[0:5])
counter = 0
for i in range(len(test_target)):
  #os.system("cls")
  #print(i.shape)
  datai = np.expand_dims(test_data[i], axis=0) #fixes "shape doesn't match" error
  #print(i.shape)

  """
  plt.figure(figsize = (0.5, 0.5))
  plt.imshow(test_data[i].reshape(8, 8), cmap = "gray")
  plt.figure(figsize = (0.5, 0.5))
  plt.imshow(test_data[i].reshape(8, 8), cmap = "gray")
  time.sleep(2)
  """

  prediction = clf1.predict(datai)
  #print(prediction)
  if(prediction[0]!=test_target[i]):
    #print("Different")
    print("Correct answer:", test_target[i])
    print("Prediction by my machine:", prediction[0])
    plt.figure(figsize=(0.5, 0.5))
    plt.imshow(test_data[i].reshape(8, 8), cmap="gray")
    plt.show()
    counter+=1

print("Differences:", counter)

#print(prediction)
#print(test_target[0])

counter = 0
for i in range(len(test_target)):
  datai = np.expand_dims(test_data[i], axis=0) #fixes "shape doesn't match" error

  prediction = clf1.predict(datai)
  if(prediction[0]!=test_target[i]):
    print("Correct answer:", test_target[i])
    print("Prediction by my machine:", prediction[0])
    plt.figure(figsize=(0.5, 0.5))
    plt.imshow(test_data[i].reshape(8, 8), cmap="gray")
    plt.show()
    counter+=1

print("Differences:", counter)